// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: workout-training-api/workout/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	"workout-training-api/internal/grpc/workout"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkoutService_CreateWorkout_FullMethodName = "/workout_training_api.ping.v1.WorkoutService/CreateWorkout"
	WorkoutService_UpdateWorkout_FullMethodName = "/workout_training_api.ping.v1.WorkoutService/UpdateWorkout"
	WorkoutService_DeleteWorkout_FullMethodName = "/workout_training_api.ping.v1.WorkoutService/DeleteWorkout"
	WorkoutService_ListWorkouts_FullMethodName  = "/workout_training_api.ping.v1.WorkoutService/ListWorkouts"
)

// WorkoutServiceClient is the client API for WorkoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkoutServiceClient interface {
	CreateWorkout(ctx context.Context, in *CreateWorkoutRequest, opts ...grpc.CallOption) (*CreateWorkoutResponse, error)
	UpdateWorkout(ctx context.Context, in *UpdateWorkoutRequest, opts ...grpc.CallOption) (*UpdateWorkoutResponse, error)
	DeleteWorkout(ctx context.Context, in *DeleteWorkoutRequest, opts ...grpc.CallOption) (*WorkoutDeleteResponse, error)
	ListWorkouts(ctx context.Context, in *ListWorkoutsRequest, opts ...grpc.CallOption) (*ListWorkoutsResponse, error)
}

type workoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkoutServiceClient(cc grpc.ClientConnInterface) WorkoutServiceClient {
	return &workoutServiceClient{cc}
}

func (c *workoutServiceClient) CreateWorkout(ctx context.Context, in *CreateWorkoutRequest, opts ...grpc.CallOption) (*CreateWorkoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkoutResponse)
	err := c.cc.Invoke(ctx, WorkoutService_CreateWorkout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutServiceClient) UpdateWorkout(ctx context.Context, in *UpdateWorkoutRequest, opts ...grpc.CallOption) (*UpdateWorkoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkoutResponse)
	err := c.cc.Invoke(ctx, WorkoutService_UpdateWorkout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutServiceClient) DeleteWorkout(ctx context.Context, in *DeleteWorkoutRequest, opts ...grpc.CallOption) (*WorkoutDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkoutDeleteResponse)
	err := c.cc.Invoke(ctx, WorkoutService_DeleteWorkout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutServiceClient) ListWorkouts(ctx context.Context, in *ListWorkoutsRequest, opts ...grpc.CallOption) (*ListWorkoutsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkoutsResponse)
	err := c.cc.Invoke(ctx, WorkoutService_ListWorkouts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkoutServiceServer is the server API for WorkoutService service.
// All implementations must embed UnimplementedWorkoutServiceServer
// for forward compatibility.
type WorkoutServiceServer interface {
	CreateWorkout(context.Context, *CreateWorkoutRequest) (*CreateWorkoutResponse, error)
	UpdateWorkout(context.Context, *UpdateWorkoutRequest) (*UpdateWorkoutResponse, error)
	DeleteWorkout(context.Context, *DeleteWorkoutRequest) (*WorkoutDeleteResponse, error)
	ListWorkouts(context.Context, *ListWorkoutsRequest) (*ListWorkoutsResponse, error)
	mustEmbedUnimplementedWorkoutServiceServer()
}

// UnimplementedWorkoutServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkoutServiceServer struct{}

func (UnimplementedWorkoutServiceServer) CreateWorkout(context.Context, *CreateWorkoutRequest) (*CreateWorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkout not implemented")
}
func (UnimplementedWorkoutServiceServer) UpdateWorkout(context.Context, *UpdateWorkoutRequest) (*UpdateWorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkout not implemented")
}
func (UnimplementedWorkoutServiceServer) DeleteWorkout(context.Context, *DeleteWorkoutRequest) (*WorkoutDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkout not implemented")
}
func (UnimplementedWorkoutServiceServer) ListWorkouts(context.Context, *ListWorkoutsRequest) (*ListWorkoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkouts not implemented")
}
func (UnimplementedWorkoutServiceServer) mustEmbedUnimplementedWorkoutServiceServer() {}
func (UnimplementedWorkoutServiceServer) testEmbeddedByValue()                        {}

// UnsafeWorkoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkoutServiceServer will
// result in compilation errors.
type UnsafeWorkoutServiceServer interface {
	mustEmbedUnimplementedWorkoutServiceServer()
}

func RegisterWorkoutServiceServer(s grpc.ServiceRegistrar, srv *workout.Workout) {
	// If the following call pancis, it indicates UnimplementedWorkoutServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkoutService_ServiceDesc, srv)
}

func _WorkoutService_CreateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).CreateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_CreateWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).CreateWorkout(ctx, req.(*CreateWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutService_UpdateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).UpdateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_UpdateWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).UpdateWorkout(ctx, req.(*UpdateWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutService_DeleteWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).DeleteWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_DeleteWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).DeleteWorkout(ctx, req.(*DeleteWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutService_ListWorkouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).ListWorkouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_ListWorkouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).ListWorkouts(ctx, req.(*ListWorkoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkoutService_ServiceDesc is the grpc.ServiceDesc for WorkoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workout_training_api.ping.v1.WorkoutService",
	HandlerType: (*WorkoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkout",
			Handler:    _WorkoutService_CreateWorkout_Handler,
		},
		{
			MethodName: "UpdateWorkout",
			Handler:    _WorkoutService_UpdateWorkout_Handler,
		},
		{
			MethodName: "DeleteWorkout",
			Handler:    _WorkoutService_DeleteWorkout_Handler,
		},
		{
			MethodName: "ListWorkouts",
			Handler:    _WorkoutService_ListWorkouts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workout-training-api/workout/v1/service.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: workout-training-api/workout/v1/model.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	Status_STATUS_PENDING     Status = 1
	Status_STATUS_IN_PROGRESS Status = 2
	Status_STATUS_COMPLETED   Status = 3
	Status_STATUS_CANCELLED   Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PENDING",
		2: "STATUS_IN_PROGRESS",
		3: "STATUS_COMPLETED",
		4: "STATUS_CANCELLED",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_PENDING":     1,
		"STATUS_IN_PROGRESS": 2,
		"STATUS_COMPLETED":   3,
		"STATUS_CANCELLED":   4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_workout_training_api_workout_v1_model_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_workout_training_api_workout_v1_model_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_workout_training_api_workout_v1_model_proto_rawDescGZIP(), []int{0}
}

type MuscleGroup int32

const (
	MuscleGroup_MUSCLE_GROUP_UNSPECIFIED MuscleGroup = 0
	MuscleGroup_MUSCLE_GROUP_CHEST       MuscleGroup = 1
	MuscleGroup_MUSCLE_GROUP_BACK        MuscleGroup = 2
	MuscleGroup_MUSCLE_GROUP_SHOULDERS   MuscleGroup = 3
	MuscleGroup_MUSCLE_GROUP_BICEPS      MuscleGroup = 4
	MuscleGroup_MUSCLE_GROUP_TRICEPS     MuscleGroup = 5
	MuscleGroup_MUSCLE_GROUP_LEGS        MuscleGroup = 6
	MuscleGroup_MUSCLE_GROUP_CALVES      MuscleGroup = 7
	MuscleGroup_MUSCLE_GROUP_ABS         MuscleGroup = 8
	MuscleGroup_MUSCLE_GROUP_FOREARMS    MuscleGroup = 9
	MuscleGroup_MUSCLE_GROUP_TRAPS       MuscleGroup = 10
	MuscleGroup_MUSCLE_GROUP_GLUTES      MuscleGroup = 11
	MuscleGroup_MUSCLE_GROUP_HAMSTRINGS  MuscleGroup = 12
	MuscleGroup_MUSCLE_GROUP_QUADRICEPS  MuscleGroup = 13
	MuscleGroup_MUSCLE_GROUP_FULL_BODY   MuscleGroup = 14
	MuscleGroup_MUSCLE_GROUP_CARDIO      MuscleGroup = 15
)

// Enum value maps for MuscleGroup.
var (
	MuscleGroup_name = map[int32]string{
		0:  "MUSCLE_GROUP_UNSPECIFIED",
		1:  "MUSCLE_GROUP_CHEST",
		2:  "MUSCLE_GROUP_BACK",
		3:  "MUSCLE_GROUP_SHOULDERS",
		4:  "MUSCLE_GROUP_BICEPS",
		5:  "MUSCLE_GROUP_TRICEPS",
		6:  "MUSCLE_GROUP_LEGS",
		7:  "MUSCLE_GROUP_CALVES",
		8:  "MUSCLE_GROUP_ABS",
		9:  "MUSCLE_GROUP_FOREARMS",
		10: "MUSCLE_GROUP_TRAPS",
		11: "MUSCLE_GROUP_GLUTES",
		12: "MUSCLE_GROUP_HAMSTRINGS",
		13: "MUSCLE_GROUP_QUADRICEPS",
		14: "MUSCLE_GROUP_FULL_BODY",
		15: "MUSCLE_GROUP_CARDIO",
	}
	MuscleGroup_value = map[string]int32{
		"MUSCLE_GROUP_UNSPECIFIED": 0,
		"MUSCLE_GROUP_CHEST":       1,
		"MUSCLE_GROUP_BACK":        2,
		"MUSCLE_GROUP_SHOULDERS":   3,
		"MUSCLE_GROUP_BICEPS":      4,
		"MUSCLE_GROUP_TRICEPS":     5,
		"MUSCLE_GROUP_LEGS":        6,
		"MUSCLE_GROUP_CALVES":      7,
		"MUSCLE_GROUP_ABS":         8,
		"MUSCLE_GROUP_FOREARMS":    9,
		"MUSCLE_GROUP_TRAPS":       10,
		"MUSCLE_GROUP_GLUTES":      11,
		"MUSCLE_GROUP_HAMSTRINGS":  12,
		"MUSCLE_GROUP_QUADRICEPS":  13,
		"MUSCLE_GROUP_FULL_BODY":   14,
		"MUSCLE_GROUP_CARDIO":      15,
	}
)

func (x MuscleGroup) Enum() *MuscleGroup {
	p := new(MuscleGroup)
	*p = x
	return p
}

func (x MuscleGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MuscleGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_workout_training_api_workout_v1_model_proto_enumTypes[1].Descriptor()
}

func (MuscleGroup) Type() protoreflect.EnumType {
	return &file_workout_training_api_workout_v1_model_proto_enumTypes[1]
}

func (x MuscleGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MuscleGroup.Descriptor instead.
func (MuscleGroup) EnumDescriptor() ([]byte, []int) {
	return file_workout_training_api_workout_v1_model_proto_rawDescGZIP(), []int{1}
}

type Category int32

const (
	Category_CATEGORY_UNSPECIFIED Category = 0
	Category_CATEGORY_STRENGTH    Category = 1
	Category_CATEGORY_CARDIO      Category = 2
	Category_CATEGORY_FLEXIBILITY Category = 3
	Category_CATEGORY_BALANCE     Category = 4
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0: "CATEGORY_UNSPECIFIED",
		1: "CATEGORY_STRENGTH",
		2: "CATEGORY_CARDIO",
		3: "CATEGORY_FLEXIBILITY",
		4: "CATEGORY_BALANCE",
	}
	Category_value = map[string]int32{
		"CATEGORY_UNSPECIFIED": 0,
		"CATEGORY_STRENGTH":    1,
		"CATEGORY_CARDIO":      2,
		"CATEGORY_FLEXIBILITY": 3,
		"CATEGORY_BALANCE":     4,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_workout_training_api_workout_v1_model_proto_enumTypes[2].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_workout_training_api_workout_v1_model_proto_enumTypes[2]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_workout_training_api_workout_v1_model_proto_rawDescGZIP(), []int{2}
}

type Workout struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	WorkoutId     string                   `protobuf:"bytes,1,opt,name=workout_id,json=workoutId,proto3" json:"workout_id,omitempty"`
	UserId        string                   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name          string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Exercises     []*Exercise              `protobuf:"bytes,5,rep,name=exercises,proto3" json:"exercises,omitempty"`
	Status        Status                   `protobuf:"varint,6,opt,name=status,proto3,enum=workout_training_api.ping.v1.Status" json:"status,omitempty"`
	Comments      []*Comment               `protobuf:"bytes,7,rep,name=comments,proto3" json:"comments,omitempty"`
	ScheduledDate []*timestamppb.Timestamp `protobuf:"bytes,8,rep,name=scheduled_date,json=scheduledDate,proto3" json:"scheduled_date,omitempty"`
	CreatedAt     *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp   `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Workout) Reset() {
	*x = Workout{}
	mi := &file_workout_training_api_workout_v1_model_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workout) ProtoMessage() {}

func (x *Workout) ProtoReflect() protoreflect.Message {
	mi := &file_workout_training_api_workout_v1_model_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workout.ProtoReflect.Descriptor instead.
func (*Workout) Descriptor() ([]byte, []int) {
	return file_workout_training_api_workout_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *Workout) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *Workout) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Workout) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workout) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Workout) GetExercises() []*Exercise {
	if x != nil {
		return x.Exercises
	}
	return nil
}

func (x *Workout) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *Workout) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Workout) GetScheduledDate() []*timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledDate
	}
	return nil
}

func (x *Workout) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Workout) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Exercise struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExerciseId    string                 `protobuf:"bytes,1,opt,name=exercise_id,json=exerciseId,proto3" json:"exercise_id,omitempty"`
	WorkoitId     string                 `protobuf:"bytes,2,opt,name=workoit_id,json=workoitId,proto3" json:"workoit_id,omitempty"`
	MuscleGroup   MuscleGroup            `protobuf:"varint,3,opt,name=muscle_group,json=muscleGroup,proto3,enum=workout_training_api.ping.v1.MuscleGroup" json:"muscle_group,omitempty"`
	Category      Category               `protobuf:"varint,4,opt,name=category,proto3,enum=workout_training_api.ping.v1.Category" json:"category,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Sets          uint32                 `protobuf:"varint,6,opt,name=sets,proto3" json:"sets,omitempty"`
	RepsPerSet    uint32                 `protobuf:"varint,7,opt,name=reps_per_set,json=repsPerSet,proto3" json:"reps_per_set,omitempty"`
	WeightKg      float32                `protobuf:"fixed32,8,opt,name=weight_kg,json=weightKg,proto3" json:"weight_kg,omitempty"`
	Notes         string                 `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Exercise) Reset() {
	*x = Exercise{}
	mi := &file_workout_training_api_workout_v1_model_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exercise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exercise) ProtoMessage() {}

func (x *Exercise) ProtoReflect() protoreflect.Message {
	mi := &file_workout_training_api_workout_v1_model_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exercise.ProtoReflect.Descriptor instead.
func (*Exercise) Descriptor() ([]byte, []int) {
	return file_workout_training_api_workout_v1_model_proto_rawDescGZIP(), []int{1}
}

func (x *Exercise) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *Exercise) GetWorkoitId() string {
	if x != nil {
		return x.WorkoitId
	}
	return ""
}

func (x *Exercise) GetMuscleGroup() MuscleGroup {
	if x != nil {
		return x.MuscleGroup
	}
	return MuscleGroup_MUSCLE_GROUP_UNSPECIFIED
}

func (x *Exercise) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_CATEGORY_UNSPECIFIED
}

func (x *Exercise) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exercise) GetSets() uint32 {
	if x != nil {
		return x.Sets
	}
	return 0
}

func (x *Exercise) GetRepsPerSet() uint32 {
	if x != nil {
		return x.RepsPerSet
	}
	return 0
}

func (x *Exercise) GetWeightKg() float32 {
	if x != nil {
		return x.WeightKg
	}
	return 0
}

func (x *Exercise) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Exercise) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Exercise) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       string                 `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Comment) Reset() {
	*x = Comment{}
	mi := &file_workout_training_api_workout_v1_model_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_workout_training_api_workout_v1_model_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_workout_training_api_workout_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *Comment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

var File_workout_training_api_workout_v1_model_proto protoreflect.FileDescriptor

var file_workout_training_api_workout_v1_model_proto_rawDesc = string([]byte{
	0x0a, 0x2b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x77,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x03, 0x0a,
	0x07, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x52, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcf, 0x03, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6b, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x23, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x78, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xaa, 0x03, 0x0a, 0x0b, 0x4d, 0x75, 0x73, 0x63,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x55, 0x53, 0x43, 0x4c,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x45, 0x52, 0x53, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x42, 0x49, 0x43, 0x45, 0x50, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x55, 0x53,
	0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x52, 0x49, 0x43, 0x45, 0x50,
	0x53, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x45, 0x47, 0x53, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x55,
	0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x4c, 0x56, 0x45,
	0x53, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x42, 0x53, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x55, 0x53,
	0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x41, 0x52,
	0x4d, 0x53, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x53, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x47, 0x4c, 0x55,
	0x54, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x48, 0x41, 0x4d, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x53,
	0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x44, 0x52, 0x49, 0x43, 0x45, 0x50, 0x53, 0x10, 0x0d, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x55, 0x53, 0x43, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x49, 0x4f, 0x10, 0x0f, 0x2a, 0x80, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x42, 0x4e, 0x5a, 0x4c, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2d,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_workout_training_api_workout_v1_model_proto_rawDescOnce sync.Once
	file_workout_training_api_workout_v1_model_proto_rawDescData []byte
)

func file_workout_training_api_workout_v1_model_proto_rawDescGZIP() []byte {
	file_workout_training_api_workout_v1_model_proto_rawDescOnce.Do(func() {
		file_workout_training_api_workout_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_workout_training_api_workout_v1_model_proto_rawDesc), len(file_workout_training_api_workout_v1_model_proto_rawDesc)))
	})
	return file_workout_training_api_workout_v1_model_proto_rawDescData
}

var file_workout_training_api_workout_v1_model_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_workout_training_api_workout_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_workout_training_api_workout_v1_model_proto_goTypes = []any{
	(Status)(0),                   // 0: workout_training_api.ping.v1.Status
	(MuscleGroup)(0),              // 1: workout_training_api.ping.v1.MuscleGroup
	(Category)(0),                 // 2: workout_training_api.ping.v1.Category
	(*Workout)(nil),               // 3: workout_training_api.ping.v1.Workout
	(*Exercise)(nil),              // 4: workout_training_api.ping.v1.Exercise
	(*Comment)(nil),               // 5: workout_training_api.ping.v1.Comment
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_workout_training_api_workout_v1_model_proto_depIdxs = []int32{
	4,  // 0: workout_training_api.ping.v1.Workout.exercises:type_name -> workout_training_api.ping.v1.Exercise
	0,  // 1: workout_training_api.ping.v1.Workout.status:type_name -> workout_training_api.ping.v1.Status
	5,  // 2: workout_training_api.ping.v1.Workout.comments:type_name -> workout_training_api.ping.v1.Comment
	6,  // 3: workout_training_api.ping.v1.Workout.scheduled_date:type_name -> google.protobuf.Timestamp
	6,  // 4: workout_training_api.ping.v1.Workout.created_at:type_name -> google.protobuf.Timestamp
	6,  // 5: workout_training_api.ping.v1.Workout.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 6: workout_training_api.ping.v1.Exercise.muscle_group:type_name -> workout_training_api.ping.v1.MuscleGroup
	2,  // 7: workout_training_api.ping.v1.Exercise.category:type_name -> workout_training_api.ping.v1.Category
	6,  // 8: workout_training_api.ping.v1.Exercise.created_at:type_name -> google.protobuf.Timestamp
	6,  // 9: workout_training_api.ping.v1.Exercise.updated_at:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_workout_training_api_workout_v1_model_proto_init() }
func file_workout_training_api_workout_v1_model_proto_init() {
	if File_workout_training_api_workout_v1_model_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_workout_training_api_workout_v1_model_proto_rawDesc), len(file_workout_training_api_workout_v1_model_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_workout_training_api_workout_v1_model_proto_goTypes,
		DependencyIndexes: file_workout_training_api_workout_v1_model_proto_depIdxs,
		EnumInfos:         file_workout_training_api_workout_v1_model_proto_enumTypes,
		MessageInfos:      file_workout_training_api_workout_v1_model_proto_msgTypes,
	}.Build()
	File_workout_training_api_workout_v1_model_proto = out.File
	file_workout_training_api_workout_v1_model_proto_goTypes = nil
	file_workout_training_api_workout_v1_model_proto_depIdxs = nil
}

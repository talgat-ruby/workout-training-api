// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"sync/atomic"
	"workout-training-api/internal/graphql/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	Auth func(ctx context.Context, obj any, next graphql.Resolver) (res any, err error)
}

type ComplexityRoot struct {
	Exercise struct {
		Category    func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Repetitions func(childComplexity int) int
		Sets        func(childComplexity int) int
		Weight      func(childComplexity int) int
	}

	Mutation struct {
		CreateWorkout func(childComplexity int, name string, description string, exercises []*model.ExerciseInput, scheduledTime string) int
		DeleteWorkout func(childComplexity int, workoutID string) int
		GetPing       func(childComplexity int) int
		SignIn        func(childComplexity int, email string, password string) int
		SignUp        func(childComplexity int, email string, password string) int
		UpdateWorkout func(childComplexity int, workout model.WorkoutInput) int
	}

	Ping struct {
		Message func(childComplexity int) int
	}

	Query struct {
		GetPing      func(childComplexity int) int
		ListWorkouts func(childComplexity int) int
	}

	SignInResp struct {
		Token func(childComplexity int) int
	}

	SignUpResp struct {
		Token func(childComplexity int) int
	}

	Workout struct {
		Description    func(childComplexity int) int
		Exercises      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		ScheduledTimes func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Exercise.category":
		if e.complexity.Exercise.Category == nil {
			break
		}

		return e.complexity.Exercise.Category(childComplexity), true

	case "Exercise.id":
		if e.complexity.Exercise.ID == nil {
			break
		}

		return e.complexity.Exercise.ID(childComplexity), true

	case "Exercise.name":
		if e.complexity.Exercise.Name == nil {
			break
		}

		return e.complexity.Exercise.Name(childComplexity), true

	case "Exercise.repetitions":
		if e.complexity.Exercise.Repetitions == nil {
			break
		}

		return e.complexity.Exercise.Repetitions(childComplexity), true

	case "Exercise.sets":
		if e.complexity.Exercise.Sets == nil {
			break
		}

		return e.complexity.Exercise.Sets(childComplexity), true

	case "Exercise.weight":
		if e.complexity.Exercise.Weight == nil {
			break
		}

		return e.complexity.Exercise.Weight(childComplexity), true

	case "Mutation.createWorkout":
		if e.complexity.Mutation.CreateWorkout == nil {
			break
		}

		args, err := ec.field_Mutation_createWorkout_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWorkout(childComplexity, args["name"].(string), args["description"].(string), args["exercises"].([]*model.ExerciseInput), args["scheduledTime"].(string)), true

	case "Mutation.deleteWorkout":
		if e.complexity.Mutation.DeleteWorkout == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWorkout_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWorkout(childComplexity, args["workoutID"].(string)), true

	case "Mutation.getPing":
		if e.complexity.Mutation.GetPing == nil {
			break
		}

		return e.complexity.Mutation.GetPing(childComplexity), true

	case "Mutation.signIn":
		if e.complexity.Mutation.SignIn == nil {
			break
		}

		args, err := ec.field_Mutation_signIn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SignIn(childComplexity, args["email"].(string), args["password"].(string)), true

	case "Mutation.signUp":
		if e.complexity.Mutation.SignUp == nil {
			break
		}

		args, err := ec.field_Mutation_signUp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SignUp(childComplexity, args["email"].(string), args["password"].(string)), true

	case "Mutation.updateWorkout":
		if e.complexity.Mutation.UpdateWorkout == nil {
			break
		}

		args, err := ec.field_Mutation_updateWorkout_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWorkout(childComplexity, args["workout"].(model.WorkoutInput)), true

	case "Ping.message":
		if e.complexity.Ping.Message == nil {
			break
		}

		return e.complexity.Ping.Message(childComplexity), true

	case "Query.getPing":
		if e.complexity.Query.GetPing == nil {
			break
		}

		return e.complexity.Query.GetPing(childComplexity), true

	case "Query.listWorkouts":
		if e.complexity.Query.ListWorkouts == nil {
			break
		}

		return e.complexity.Query.ListWorkouts(childComplexity), true

	case "SignInResp.token":
		if e.complexity.SignInResp.Token == nil {
			break
		}

		return e.complexity.SignInResp.Token(childComplexity), true

	case "SignUpResp.token":
		if e.complexity.SignUpResp.Token == nil {
			break
		}

		return e.complexity.SignUpResp.Token(childComplexity), true

	case "Workout.description":
		if e.complexity.Workout.Description == nil {
			break
		}

		return e.complexity.Workout.Description(childComplexity), true

	case "Workout.exercises":
		if e.complexity.Workout.Exercises == nil {
			break
		}

		return e.complexity.Workout.Exercises(childComplexity), true

	case "Workout.id":
		if e.complexity.Workout.ID == nil {
			break
		}

		return e.complexity.Workout.ID(childComplexity), true

	case "Workout.name":
		if e.complexity.Workout.Name == nil {
			break
		}

		return e.complexity.Workout.Name(childComplexity), true

	case "Workout.scheduledTimes":
		if e.complexity.Workout.ScheduledTimes == nil {
			break
		}

		return e.complexity.Workout.ScheduledTimes(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputExerciseInput,
		ec.unmarshalInputWorkoutInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schema/auth.directives.graphqls" "schema/auth.mutation.graphqls" "schema/ping.graphqls" "schema/ping.query.graphqls" "schema/workout.mutation.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema/auth.directives.graphqls", Input: sourceData("schema/auth.directives.graphqls"), BuiltIn: false},
	{Name: "schema/auth.mutation.graphqls", Input: sourceData("schema/auth.mutation.graphqls"), BuiltIn: false},
	{Name: "schema/ping.graphqls", Input: sourceData("schema/ping.graphqls"), BuiltIn: false},
	{Name: "schema/ping.query.graphqls", Input: sourceData("schema/ping.query.graphqls"), BuiltIn: false},
	{Name: "schema/workout.mutation.graphqls", Input: sourceData("schema/workout.mutation.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
